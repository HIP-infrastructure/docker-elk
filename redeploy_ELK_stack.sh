#!/usr/bin/env sh

DOCKER_COMPOSE="docker-compose"
HIP_URL=elk-dev.thehip.app

echo "> Make sure the stack is down..."
$DOCKER_COMPOSE down -v

ROOT_DIR=$(dirname $(realpath "$0"))
echo "  - ROOT_DIR: $ROOT_DIR"

CERTBOT_DIR="/etc/letsencrypt/live/$HIP_URL"
echo "  - CERTBOT_DIR: $CERTBOT_DIR"
# TODO: To be uncommented if we wish to run certbot
#       Note however that the if condition has to be fixed.
# if sudo test -f $CERTBOT_DIR/privkey.pem; then
#     echo "> Run certbot..."
#     sudo certbot certonly;
# fi

CERTS_DIR=$ROOT_DIR/tls/certs
echo "  - CERTS_DIR: $CERTS_DIR"
if sudo test -d $CERTS_DIR; then
    echo "> Remove existing $CERTS_DIR..."
    sudo rm -Rf $CERTS_DIR;
fi

echo "> Generare initial certificates with "docker-compose up tls"..."
$DOCKER_COMPOSE up tls

echo "> Removind certificate files that will be replaced by symlink to the one generated by certbot..."
# sudo sudo rm -vrf $CERTS_DIR/ca/ca.*
# sudo sudo rm -vrf $CERTS_DIR/elasticsearch/elasticsearch.*
sudo sudo rm -vrf $CERTS_DIR/kibana/kibana.*

# echo "> Make symlinks to certificates generated by certbot for ca"
# sudo ln -s $CERTBOT_DIR/privkey.pem $CERTS_DIR/ca/ca.key
# sudo ln -s $CERTBOT_DIR/fullchain.pem $CERTS_DIR/ca/ca.crt

# echo "> Make symlinks to certificates generated by certbot for elasticsearch"
# sudo ln -s $CERTBOT_DIR/privkey.pem $CERTS_DIR/elasticsearch/elasticsearch.key
# sudo ln -s $CERTBOT_DIR/fullchain.pem $CERTS_DIR/elasticsearch/elasticsearch.crt

echo "> Make symlinks to certificates generated by certbot for kibana"
sudo ln -s $CERTBOT_DIR/privkey.pem $CERTS_DIR/kibana/kibana.key
sudo ln -s $CERTBOT_DIR/fullchain.pem $CERTS_DIR/kibana/kibana.crt

echo "> Redeploy ELK stack..."
$DOCKER_COMPOSE up -d

echo "> Show CA Fingerprint (if needed for Elasticsearch Javascript Client)..."
sudo openssl x509 -fingerprint -sha256 -in $CERTS_DIR/ca/ca.crt